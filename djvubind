#! /usr/bin/env python3

#       This program is free software; you can redistribute it and/or modify
#       it under the terms of the GNU General Public License as published by
#       the Free Software Foundation; either version 3 of the License, or
#       (at your option) any later version.
#
#       This program is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#       GNU General Public License for more details.
#
#       You should have received a copy of the GNU General Public License
#       along with this program; if not, write to the Free Software
#       Foundation, Inc.

import glob
import optparse
import os
import shutil
import sys
import tempfile

import Djvubind.utils
import Djvubind.organizer

if __name__ == '__main__':
    # Command line parsing
    usage = "usage: %prog [options] directory"
    description = "djvubind is designed to facilitate creating high-quality djvu files, including positional ocr, metadata, and bookmarks."
    parser = optparse.OptionParser(usage, version='0.2.1', description=description)
    parser.set_defaults(quiet=False,
                        no_ocr=False, ocr_engine='tesseract', tesseract_options='-l eng', cuneiform_options='--singlecolumn',
                        cover_front='cover_front.jpg', cover_back='cover_back.jpg',
                        metadata='metadata', bookmarks='bookmarks')
    parser.add_option("--cover-front", dest="cover_front", help="Specifies an alternate front cover image.  By default, '%default' is used if present.")
    parser.add_option("--cover-back", dest="cover_back", help="Specifies an alternate back cover image.  By default, '%default' is used if present.")
    parser.add_option("--ocr-engine", dest="ocr_engine", help="Select which ocr engine to use (cuneiform|tesseract).  By default, '%default' is used.")
    parser.add_option("--tesseract-options", dest="tesseract_options", help="Additional command line options to pass to tesseract.  The default is '%default'.")
    parser.add_option("--cuneiform-options", dest="cuneiform_options", help="Additional command line options to pass to cuneiform.  The default is '%default'.")
    parser.add_option("--metadata", dest="metadata", help="Specifies an alternate metadata file.  By default, '%default' is used if present.")
    parser.add_option("--bookmarks", dest="bookmarks", help="Specifies an alternate bookmarks file.  By default, '%default' is used if present.")
    parser.add_option("--no-ocr", action="store_true", dest="no_ocr", help="Images will not be processed for text content.")
    parser.add_option("-q", "--quiet", action="store_true", dest="quiet")
    (options, args) = parser.parse_args(sys.argv)

    if options.quiet:
        sys.stdout = open('/dev/null', 'w')
    if options.ocr_engine not in ['tesseract', 'cuneiform']:
        print('err: __main__: ocr engine "{0}" is not supported.  Use "cuneiform" or "tesseract".'.format(options.ocr_engine), file=sys.stderr)
        sys.exit(1)

    # Dependency check
    deps = ['cpaldjvu', 'djvm', 'djvused', 'identify', 'minidjvu']
    for dep in deps:
        if (not Djvubind.utils.is_executable(dep)):
            print('err: __main__: external dependency ({0}) cannot be found.'.format(dep), file=sys.stderr)
            sys.exit(1)
    if not options.no_ocr:
        if (not Djvubind.utils.is_executable(options.ocr_engine)):
            print('err: __main__: ocr engine ({0}) cannot be found.  Use --no-ocr if you do not need ocr.'.format(dep), file=sys.stderr)
            sys.exit(1)
        if (options.ocr_engine != 'tesseract') and (not Djvubind.utils.is_executable('tesseract')):
            print('err: __main__: tesseract is the fallback ocr engine and cannot be found.  Use --no-ocr if you do not need ocr.'.format(dep), file=sys.stderr)
            sys.exit(1)

    # Change working directory if necessary
    if (len(args) > 2):
        print('Too many arguments, check your syntax.', file=sys.stderr)
        sys.exit(1)
    if (len(args) == 2):
        if (not os.path.isdir(args[1])):
            print('The argument ({0}) is not a directory.'.format(args[1]), file=sys.stderr)
            sys.exit(1)
        else:
            directory = os.path.normpath(os.path.join(os.path.curdir, args[1]))
            os.chdir(directory)

    # Increment the file name if a previous book.djvu already exists.
    i = 0
    outfile = 'book.djvu'
    while os.path.isfile(outfile):
        i = i + 1
        outfile = 'book(' + str(i) + ').djvu'

    # Create list of all images going into the djvu file.
    print('{0} Identifying and analyzing pages.'.format(Djvubind.utils.color('*', 'green')))
    book = Djvubind.organizer.Book()
    for file in Djvubind.utils.list_files():
        ext = file.split('.')[-1]
        ext = ext.lower()
        if (ext in ['tif', 'tiff']) and (file not in [options.cover_front, options.cover_back]):
            book.insert_page(file)
    ocr_options = {'tesseract':options.tesseract_options, 'cuneiform':options.cuneiform_options}
    book.analyze(options.ocr_engine, options.no_ocr, ocr_options)

    # Create djvu of bitonals with minidjvu
    print('{0} Compressing bitonal pages.'.format(Djvubind.utils.color('*', 'green')))
    bitonals = []
    for page in book.pages:
        if page.bitonal:
            filepath = os.path.split(page.path)[1]
            bitonals.append(filepath)
    if len(bitonals) > 0:
        filenames = '"' + '" "'.join(bitonals) + '"'
        cmd = 'minidjvu --dpi {0} --pages-per-dict 100 {1} "{2}"'.format(book.dpi, filenames, outfile)
        if len(cmd) < 32000:
            Djvubind.utils.simple_exec(cmd)
        else:
            cmds = Djvubind.utils.split_cmd('minidjvu --dpi {0} --pages-per-dict 100'.format(book.dpi), bitonals, 'temp.djvu')
            for cmd in cmds:
                Djvubind.utils.simple_exec(cmd)
                if (not os.path.isfile(outfile)):
                    shutil.move('temp.djvu', outfile)
                else:
                    Djvubind.utils.simple_exec('djvm -i {0} "temp.djvu"'.format(outfile))

    # Create djvu of non-bitonals and insert into djvu
    print('{0} Compressing and inserting non-bitonal pages.'.format(Djvubind.utils.color('*', 'green')))
    for page in book.pages:
        if not page.bitonal:
            Djvubind.utils.simple_exec('convert -opaque black "{0}" "temp_graphics.tif"'.format(page.path))
            Djvubind.utils.simple_exec('convert +opaque black "{0}" "temp_textual.tif"'.format(page.path))
            Djvubind.utils.simple_exec('cjb2 temp_textual.tif temp_textual.djvu')
            Djvubind.utils.simple_exec('ddjvu -format=rle -v temp_textual.djvu temp_textual.rle')
            Djvubind.utils.simple_exec('convert temp_graphics.tif temp_graphics.ppm')
            Djvubind.utils.execute('cat temp_textual.rle temp_graphics.ppm > temp_merge.mix')
            Djvubind.utils.simple_exec('csepdjvu -d {0} temp_merge.mix temp_final.djvu'.format(page.dpi))
            if (not os.path.isfile(outfile)):
                shutil.move('temp_final.djvu', outfile)
            else:
                page_number = book.pages.index(page)
                Djvubind.utils.simple_exec('djvm -i {0} "temp_final.djvu" {1}'.format(outfile, page_number+1))
            for tempfile in glob.glob('temp_*'):
                os.remove(tempfile)

    # Ocr
    if (not options.no_ocr):
        print('{0} Inserting OCR data.'.format(Djvubind.utils.color('*', 'green')))
        for page in book.pages:
            handle = open('ocr.txt', 'w', encoding="utf8")
            handle.write(page.text)
            handle.close()
            page_number = book.pages.index(page)+1
            Djvubind.utils.simple_exec('djvused -e "select {0}; remove-txt; set-txt \'ocr.txt\'; save" "{1}"'.format(page_number, outfile))
            os.remove('ocr.txt')

    # Insert front/back covers, metadata, and bookmarks
    if os.path.isfile(options.cover_front):
        print('{0} Inserting front cover.'.format(Djvubind.utils.color('*', 'green')))
        dpi = int(Djvubind.utils.execute("identify -format '%x' {0} | awk '{{print $1}}'".format(options.cover_front), capture=True))
        Djvubind.utils.simple_exec('c44 -dpi {0} "{1}" "{1}.djvu"'.format(dpi, options.cover_front))
        Djvubind.utils.simple_exec('djvm -i "{0}" "{1}.djvu" 1'.format(outfile, options.cover_front))
        os.remove('{0}.djvu'.format(options.cover_front))
    if os.path.isfile(options.cover_back):
        print('{0} Inserting back cover.'.format(Djvubind.utils.color('*', 'green')))
        dpi = int(Djvubind.utils.execute("identify -format '%x' {0} | awk '{{print $1}}'".format(options.cover_back), capture=True))
        Djvubind.utils.simple_exec('c44 -dpi {0} "{1}" "{1}.djvu"'.format(dpi, options.cover_back))
        Djvubind.utils.simple_exec('djvm -i "{0}" "{1}.djvu" -1'.format(outfile, options.cover_back))
        os.remove('{0}.djvu'.format(options.cover_back))
    if os.path.isfile(options.metadata):
        print('{0} Inserting metadata.'.format(Djvubind.utils.color('*', 'green')))
        Djvubind.utils.simple_exec('djvused -e "set-meta {0}; save" "{1}"'.format(options.metadata, outfile))
    if os.path.isfile(options.bookmarks):
        print('{0} Inserting bookmarks.'.format(Djvubind.utils.color('*', 'green')))
        Djvubind.utils.simple_exec('djvused -e "set-outline {0}; save" "{1}"'.format(options.bookmarks, outfile))
