#! /usr/bin/env python

#       This program is free software; you can redistribute it and/or modify
#       it under the terms of the GNU General Public License as published by
#       the Free Software Foundation; either version 3 of the License, or
#       (at your option) any later version.
#
#       This program is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#       GNU General Public License for more details.
#
#       You should have received a copy of the GNU General Public License
#       along with this program; if not, write to the Free Software
#       Foundation, Inc.

import optparse
import os
import sys

import Djvubind.utils

if __name__ == '__main__':
    # Command line parsing
    usage = "usage: %prog [options] directory"
    description = "djvubind is designed to facilitate creating high-quality djvu files, including positional ocr, metadata, and bookmarks."
    parser = optparse.OptionParser(usage, version='0.0.1', description=description)
    parser.set_defaults(quiet=False,
                        front_cover='cover_front.tiff', back_cover='cover_back.tiff',
                        metadata='metadata', bookmarks='bookmarks',
                        dpi=None)
    parser.add_option("--front_cover", dest="cover_front", help="Specifies an alternate front cover image.  By default, '%default' is used if present.")
    parser.add_option("--back_cover", dest="cover_back", help="Specifies an alternate back cover image.  By default, '%default' is used if present.")
    parser.add_option("--metadata", dest="metadata", help="Specifies an alternate metadata file.  By default, '%default' is used if present.")
    parser.add_option("--bookmarks", dest="bookmarks", help="Specifies an alternate bookmarks.  By default, '%default' is used if present.")
    parser.add_option("--dpi", dest="dpi", help="The dpi of the images.  Presently this *needs* to be specified by hand.")
    parser.add_option("-q", "--quiet", action="store_true", dest="quiet")
    (options, args) = parser.parse_args(sys.argv)

    if options.quiet:
        sys.stdout = open('/dev/null', 'w')

    if options.dpi is None:
        print('Presently, the --dpi option *must* be sepcified.', file=sys.stderr)
        sys.exit(1)

    # Dependency check
    deps = ['cpaldjvu', 'djvm', 'djvused', 'identify', 'minidjvu', 'tesseract']
    for dep in deps:
        if (not Djvubind.utils.is_executable(dep)):
            print('err: __main__: external dependency ({0}) cannot be found'.format(dep), file=sys.stderr)
            sys.exit(1)

    # Change working directory if necessary
    if (len(args) > 2):
        print('Too many arguments, check your syntax.', file=sys.stderr)
        sys.exit(1)
    if (len(args) == 2):
        if (not os.path.isdir(args[1])):
            print('The argument ({0}) is not a directory.'.format(args[1]))
            sys.exit(1)
        else:
            directory = os.path.normpath(os.path.join(os.path.curdir, args[1]))
            os.chdir(directory)

    # Create list of all images going into the djvu file.
    images = Djvubind.utils.list_files()
    remove = []
    for file in images:
        ext = file.split('.')[-1]
        ext = ext.lower()
        if (ext not in ['tif', 'tiff', 'jpg', 'jpeg']) or (file in [options.cover_front, options.cover_back]):
            remove.append(file)
    for file in remove:
        images.remove(file)
    del remove

    # Create a dictionary wherin the key is the filename and the value is the page number
    page_numbers = {}
    i = 0
    for file in images:
        page_numbers[file] = i
        i = i + 1
    del i

    # Identify non-bitonal pages
    nonbitonal = []
    for file in images:
        if Djvubind.utils.execute('identify -format %z "{0}"'.format(file), capture=True) != b'1\n':
            nonbitonal.append(file)
    nonbitonal.sort()

    # Rename image files temporarily so that minidjvu can work exclusively with the bitonals
    for file in images:
        if file not in nonbitonal:
            os.rename(file, 'bitonal_'+file)
        else:
            os.rename(file, 'nonbitonal_'+file)

    # Create djvu with minidjvu
    Djvubind.utils.execute('minidjvu --dpi {0} --pages-per-dict 100 bitonal_* book.djvu'.format(options.dpi))

    # Create djvu of non-bitonals and insert into djvu
    for file in nonbitonal:
        Djvubind.utils.execute('convert "nonbitonal_{0}" "nonbitonal_{0}.ppm"'.format(file))
        Djvubind.utils.execute('cpaldjvu -dpi {0} "nonbitonal_{1}.ppm" "nonbitonal_{1}.djvu"' % (options.dpi, file))
        os.remove('nonbitonal_{0}.ppm'.format(file))
        page_number = page_numbers[file]
        Djvubind.utils.execute('djvm -i book.djvu "nonbitonal_{0}.djvu" {1}'.format(file, page_number+1))
        os.remove('bitonal_{0}.djvu'.format(file))

    # Restore original filenames
    for file in images:
        if file not in nonbitonal:
            os.rename('bitonal_'+file, file)
        else:
            os.rename('nonbitonal_'+file, file)

    # Ocr
    #os.system('djvuocr -i "." -f book.djvu')

    # Insert front/back covers, metadata, and bookmarks
    if os.path.isfile(options.cover_front):
        Djvubind.utils.execute('convert "{0}" "{0}.ppm"'.format(options.cover_front))
        Djvubind.utils.execute('cpaldjvu -dpi {0} "{1}.ppm" "{1}.djvu"'.format(options.dpi, options.cover_front))
        os.remove('{0}.ppm'.format(options.cover_front))
        Djvubind.utils.execute('djvm -i book.djvu "{0}" 1'.format(options.cover_front))
    if os.path.isfile(options.cover_back):
        Djvubind.utils.execute('convert "{0}" "{0}.ppm"'.format(options.cover_back))
        Djvubind.utils.execute('cpaldjvu -dpi {0} "{1}.ppm" "{1}.djvu"'.format(options.dpi, options.cover_back))
        os.remove('{0}.ppm'.format(options.cover_back))
        Djvubind.utils.execute('djvm -i book.djvu "{0}" -1'.format(options.cover_back))
    if os.path.isfile(options.metadata):
        Djvubind.utils.execute('djvused -e "set-meta {0}; save" book.djvu'.format(options.metadata))
    if os.path.isfile(options.bookmarks):
        Djvubind.utils.execute('djvused -e "set-outline {0}; save" book.djvu'.format(options.bookmarks))
